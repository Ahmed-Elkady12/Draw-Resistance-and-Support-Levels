//@version=5
indicator("Draw Resistance and Support Levels",overlay = true)
N1=input.int(1,"Enter The Number Of The candles on the Left ")
N2=input.int(1,"Enter The Number Of The candles on the Right ")
N3=input.int(1,"Enter The Number of Previous Candles")
N4=input.int(1,"Enter The Factor ")


get_resistance_value()=>
    var float resistance_price=na
    var int resistance_index=na
    index=1


    // Criteria for Resistance Level
    if barstate.islast
        candleindex=N2+index-1

        while true
            flag=true
            flag2=false
            
            // case one
            while index <= candleindex
                float gap=-1
                float sum_gaps=0
                if close[index] > open[index-1]
                    gap:=close[index]-open[index-1]

                if gap !=-1
                    for i=index to N3+index
                        sum_gaps+=math.abs(close[index+1]-open[index])

                    if gap > N4*((sum_gaps)/N3)
                        flag2:=true
                    if flag2==true 
                        for i=1 to index-1
                            if high[i]>=close[index]
                                flag2:=false
                
                if flag2==true
                    resistance_price:=close[index] 
                    resistance_index:=index
                    break  
                index+=1
            
            if flag2 
                break
            
            
            // case 1
            // check if this candle large of all left
            for i=1 to index-1
                if high[index] <= high[i]
                    flag:=false
                    break

            // check if this candl large of all right
            for i=(index+1) to index+N1
                if high[index] <= high[i]
                    flag:=false
                    break

            // case 2
            float gap=-1
            float sum_gaps=0
            if close[index] > open[index-1]
                gap:=close[index]-open[index-1]

            if gap !=-1
                for i=index to N3+index
                    sum_gaps+=math.abs(close[index+1]-open[index])

                if gap > N4*((sum_gaps)/N3)
                    flag2:=true
                if flag2 
                    for i=1 to index-1
                        if high[i]>=high[index]
                            flag2:=false
            
            if flag2==true
                resistance_price:=close[index]
                resistance_index:=index
                break  

            //assign the price and breake
            else if flag==true
                resistance_price:=high[index] 
                resistance_index:=index
                break  
            index+=1
    [resistance_index,resistance_price]



get_support_value()=>
    // Set Variables
    index=1
    var float support_price=na
    var int support_index=na
    if barstate.islast
        candleindex=N2+index-1
        while true

            flag=true
            flag2=false

            while index <= candleindex
               
                // case one
                float gap=-1
                float sum_gaps=0
                if close[index] < open[index-1]
                    gap:=math.abs(close[index]-open[index-1])

                if gap !=-1
                    for i=index to N3+index
                        sum_gaps+=math.abs(close[index+1]-open[index])

                    if gap > N4*((sum_gaps)/N3)
                        flag2:=true
                    if flag2 
                        for i=1 to index-1
                            if low[i]<=low[index]
                                flag2:=false
                
                if flag2==true
                    support_price:=low[index] 
                    support_index:=index
                    break  
                index+=1
            
            if flag2 
                break           
            // case 1
            // check if this candle large of all left
            for i=1 to index-1
                if low[index] >= low[i]
                    flag:=false
                    break

            // check if this candl large of all right
            for i=(index+1) to index+N1
                if low[index] >= low[i]
                    flag:=false
                    break

            // case 2
            float gap=-1
            float sum_gaps=0
            if close[index] < open[index-1]
                gap:=math.abs(close[index]-open[index-1])

            if gap !=-1
                for i=index to N3+index
                    sum_gaps+=math.abs(close[index+1]-open[index])

                if gap > N4*((sum_gaps)/N3)
                    flag2:=true
                if flag2 
                    for i=1 to index-1
                        if low[i]>=low[index]
                            flag:=false
            
            if flag2 or flag
                support_price:=low[index] 
                support_index:=index
                break  

            index+=1
    [support_index,support_price]


[support_index,support_value]=get_support_value()
[resistance_index,resistance_value]=get_resistance_value()

// Draw Lines
line.new(bar_index-support_index,support_value, bar_index, support_value, width = 3,color = color.red)
line.new(bar_index-resistance_index,resistance_value, bar_index, resistance_value, width = 3,color = color.blue)



