//@version=5
indicator("Draw Resistance and Support Levels",overlay = true)
N1=input.int(1,"Enter The Number Of The candles on the Left ")
N2=input.int(1,"Enter The Number Of The candles on the Right ")
N3=input.int(1,"Enter The Number of Previous Candles")
N4=input.int(1,"Enter The Factor ")



get_resistance_value()=>
    var resistance=false
    var float resistance_price=na
    var int resistance_index=na
    index=1


    // Criteria for Resistance Level
    if barstate.islast

        while not resistance
            // get the index of the candle and the hight
            candleindex=N2+index
            candlehigh=high[candleindex]
            flag=true
            flag2=false
            
            // case 1
            // check if this candle large of all left
            for i=1 to candleindex-1
                if candlehigh <= high[i]
                    flag:=false
                    break

            // check if this candl large of all right
            for i=(candleindex+1) to candleindex+N1
                if candlehigh <= high[i]
                    flag:=false
                    break

            // case 2
            float gap=-1
            float sum_gaps=0
            if close[index] > open[index-1]
                gap:=close[index]-open[index-1]

            if gap !=-1
                for i=index to N3+index
                    sum_gaps+=math.abs(close[index+1]-open[index])

                if gap > N4*((sum_gaps)/N3)
                    flag2:=true
                else 
                    for i=1 to index-1
                        if high[i]>=high[index]
                            flag:=false
            
            if flag2
                resistance_price:=close[index] 
                resistance_index:=index
                break  

            //assign the price and breake
            else if flag==true
                resistance_price:=candlehigh 
                resistance_index:=candleindex
                break  
            index+=1
    [resistance_index,resistance_price]



get_support_value()=>
    // Set Variables
    var support=false
    index=1
    var float support_price=na
    var int support_index=na
    if barstate.islast

        while not support
        // get the index of the candle and the hight
            candleindex=N2+index
            candlelow=low[candleindex]
            flag=true
            flag2=false
            
            // case 1
            // check if this candle large of all left
            for i=1 to candleindex-1
                if candlelow >= low[i]
                    flag:=false
                    break

            // check if this candl large of all right
            for i=(candleindex+1) to candleindex+N1
                if candlelow >= low[i]
                    flag:=false
                    break

            // case 2
            float gap=-1
            float sum_gaps=0
            if close[index] > open[index-1]
                gap:=close[index]-open[index-1]

            if gap !=-1
                for i=index to N3+index
                    sum_gaps+=math.abs(close[index+1]-open[index])

                if gap > N4*((sum_gaps)/N3)
                    flag2:=true
                else 
                    for i=1 to index-1
                        if high[i]>=high[index]
                            flag:=false
            
            if flag2
                support_price:=open[index] 
                support_index:=index
                break  

            // assign the price and breake
            if flag==true
                support_price:=candlelow
                support_index:=candleindex 
                break  
            index+=1
    [support_index,support_price]


[support_index,support_value]=get_support_value()
[resistance_index,resistance_value]=get_resistance_value()

// Draw Lines
line.new(bar_index-support_index,support_value, bar_index, support_value, width = 3,color = color.red)
line.new(bar_index-resistance_index,resistance_value, bar_index, resistance_value, width = 3,color = color.blue)



